// This file has been auto-generated by Warthog.  Do not update directly as it
// will be re-written.  If you need to change this file, update models or add
// new TypeGraphQL objects
// prettier-ignore
// @ts-ignore
import { DateResolver as Date } from 'graphql-scalars';
// prettier-ignore
// @ts-ignore
import { GraphQLID as ID } from 'graphql';
// prettier-ignore
// @ts-ignore
import { ArgsType, Field as TypeGraphQLField, Float, InputType as TypeGraphQLInputType, Int } from 'type-graphql';
// prettier-ignore
// @ts-ignore
import { registerEnumType, GraphQLISODateTime as DateTime } from "type-graphql";

import * as BN from "bn.js";

// prettier-ignore
// @ts-ignore eslint-disable-next-line @typescript-eslint/no-var-requires
const { GraphQLJSONObject } = require('graphql-type-json');
// prettier-ignore
// @ts-ignore
import { BaseWhereInput, JsonObject, PaginationArgs, DateOnlyString, DateTimeString, BigInt, Bytes } from '@subsquid/warthog';

// @ts-ignore
import { Heartbeat } from "../modules/heartbeat/heartbeat.model";
// @ts-ignore
import { LastHeartbeat } from "../modules/last-heartbeat/last-heartbeat.model";

export enum HeartbeatOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  blockNumber_ASC = "blockNumber_ASC",
  blockNumber_DESC = "blockNumber_DESC",

  authorityId_ASC = "authorityId_ASC",
  authorityId_DESC = "authorityId_DESC",

  validator_ASC = "validator_ASC",
  validator_DESC = "validator_DESC",

  peerId_ASC = "peerId_ASC",
  peerId_DESC = "peerId_DESC",

  networkAddress_ASC = "networkAddress_ASC",
  networkAddress_DESC = "networkAddress_DESC",

  multiAddress_ASC = "multiAddress_ASC",
  multiAddress_DESC = "multiAddress_DESC",

  ipv4_ASC = "ipv4_ASC",
  ipv4_DESC = "ipv4_DESC",
}

registerEnumType(HeartbeatOrderByEnum, {
  name: "HeartbeatOrderByInput",
});

@TypeGraphQLInputType()
export class HeartbeatWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  blockNumber_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  blockNumber_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  blockNumber_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  blockNumber_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  blockNumber_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  blockNumber_in?: string[];

  @TypeGraphQLField({ nullable: true })
  authorityId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  authorityId_contains?: string;

  @TypeGraphQLField({ nullable: true })
  authorityId_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  authorityId_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  authorityId_in?: string[];

  @TypeGraphQLField({ nullable: true })
  validator_eq?: string;

  @TypeGraphQLField({ nullable: true })
  validator_contains?: string;

  @TypeGraphQLField({ nullable: true })
  validator_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  validator_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  validator_in?: string[];

  @TypeGraphQLField({ nullable: true })
  peerId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  peerId_contains?: string;

  @TypeGraphQLField({ nullable: true })
  peerId_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  peerId_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  peerId_in?: string[];

  @TypeGraphQLField({ nullable: true })
  networkAddress_eq?: string;

  @TypeGraphQLField({ nullable: true })
  networkAddress_contains?: string;

  @TypeGraphQLField({ nullable: true })
  networkAddress_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  networkAddress_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  networkAddress_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  multiAddress_eq?: Boolean;

  @TypeGraphQLField(() => [Boolean], { nullable: true })
  multiAddress_in?: Boolean[];

  @TypeGraphQLField({ nullable: true })
  ipv4_eq?: string;

  @TypeGraphQLField({ nullable: true })
  ipv4_contains?: string;

  @TypeGraphQLField({ nullable: true })
  ipv4_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  ipv4_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  ipv4_in?: string[];

  @TypeGraphQLField(() => HeartbeatWhereInput, { nullable: true })
  AND?: [HeartbeatWhereInput];

  @TypeGraphQLField(() => HeartbeatWhereInput, { nullable: true })
  OR?: [HeartbeatWhereInput];
}

@TypeGraphQLInputType()
export class HeartbeatWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class HeartbeatCreateInput {
  @TypeGraphQLField({ nullable: true })
  blockNumber?: string;

  @TypeGraphQLField({ nullable: true })
  authorityId?: string;

  @TypeGraphQLField({ nullable: true })
  validator?: string;

  @TypeGraphQLField({ nullable: true })
  peerId?: string;

  @TypeGraphQLField({ nullable: true })
  networkAddress?: string;

  @TypeGraphQLField({ nullable: true })
  multiAddress?: boolean;

  @TypeGraphQLField({ nullable: true })
  ipv4?: string;
}

@TypeGraphQLInputType()
export class HeartbeatUpdateInput {
  @TypeGraphQLField({ nullable: true })
  blockNumber?: string;

  @TypeGraphQLField({ nullable: true })
  authorityId?: string;

  @TypeGraphQLField({ nullable: true })
  validator?: string;

  @TypeGraphQLField({ nullable: true })
  peerId?: string;

  @TypeGraphQLField({ nullable: true })
  networkAddress?: string;

  @TypeGraphQLField({ nullable: true })
  multiAddress?: boolean;

  @TypeGraphQLField({ nullable: true })
  ipv4?: string;
}

@ArgsType()
export class HeartbeatWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => HeartbeatWhereInput, { nullable: true })
  where?: HeartbeatWhereInput;

  @TypeGraphQLField(() => HeartbeatOrderByEnum, { nullable: true })
  orderBy?: HeartbeatOrderByEnum[];
}

@ArgsType()
export class HeartbeatCreateManyArgs {
  @TypeGraphQLField(() => [HeartbeatCreateInput])
  data!: HeartbeatCreateInput[];
}

@ArgsType()
export class HeartbeatUpdateArgs {
  @TypeGraphQLField() data!: HeartbeatUpdateInput;
  @TypeGraphQLField() where!: HeartbeatWhereUniqueInput;
}

export enum LastHeartbeatOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  heartbeatId_ASC = "heartbeatId_ASC",
  heartbeatId_DESC = "heartbeatId_DESC",
}

registerEnumType(LastHeartbeatOrderByEnum, {
  name: "LastHeartbeatOrderByInput",
});

@TypeGraphQLInputType()
export class LastHeartbeatWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  heartbeatId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  heartbeatId_contains?: string;

  @TypeGraphQLField({ nullable: true })
  heartbeatId_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  heartbeatId_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  heartbeatId_in?: string[];

  @TypeGraphQLField(() => LastHeartbeatWhereInput, { nullable: true })
  AND?: [LastHeartbeatWhereInput];

  @TypeGraphQLField(() => LastHeartbeatWhereInput, { nullable: true })
  OR?: [LastHeartbeatWhereInput];
}

@TypeGraphQLInputType()
export class LastHeartbeatWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class LastHeartbeatCreateInput {
  @TypeGraphQLField()
  heartbeatId!: string;
}

@TypeGraphQLInputType()
export class LastHeartbeatUpdateInput {
  @TypeGraphQLField({ nullable: true })
  heartbeatId?: string;
}

@ArgsType()
export class LastHeartbeatWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => LastHeartbeatWhereInput, { nullable: true })
  where?: LastHeartbeatWhereInput;

  @TypeGraphQLField(() => LastHeartbeatOrderByEnum, { nullable: true })
  orderBy?: LastHeartbeatOrderByEnum[];
}

@ArgsType()
export class LastHeartbeatCreateManyArgs {
  @TypeGraphQLField(() => [LastHeartbeatCreateInput])
  data!: LastHeartbeatCreateInput[];
}

@ArgsType()
export class LastHeartbeatUpdateArgs {
  @TypeGraphQLField() data!: LastHeartbeatUpdateInput;
  @TypeGraphQLField() where!: LastHeartbeatWhereUniqueInput;
}
